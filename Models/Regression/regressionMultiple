from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_score, KFold
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import os
import seaborn as sns
import statsmodels.api as sm
from sklearn.preprocessing import StandardScaler
 
# Edit this <------
Region = 'London'
x_label_features = 'index_space_syntax_length'
y_label = 'hypertension'




os.chdir(os.path.dirname(os.path.abspath(__file__)))

# Different predictor combinations
# cycle_in = cycle_metrics[1:] not ideal this one, as some scores build upon others, such as space syntax use CQI score and commute path uses crash and commute rate already
features = {
    'Mean_Raw' : ['ScoreCQIMean', 'crash_rate', 'commute_rate'],
    'Mean_Length' : ['index_length', 'crash_rate', 'commute_rate'],
    'space_syntax' : ['index_space_syntax', 'crash_rate', 'commute_rate'],
    'VIF-Test' : ['ScoreCQI', 'crash_rate', 'ScoreCQIMean'],
    'index_space_syntax_length' : ['index_space_syntax_length','commute_path', 'commute_rate']
}
# --- Dependant variable(s)
health_metrics = ['msoa', 'diabetes', 'opioids', 'OME', 'total', 'asthma', 'hypertension', 'depression', 'anxiety']
df_y = pd.read_csv(
    f"../../MedSat/{Region}/msoa_medsat_scores.csv",
    header=0,
    names=health_metrics
)

# --- predictor variables
cycle_metrics = ['msoa', 'ScoreCQI', 'crash_rate', 'commute_rate', 'OverallCycleScore', 'ScoreCQIMean', 'index_length', 'index_space_syntax', 'index_space_syntax_length', 'commute_path']
df_x = pd.read_csv(
    f"../../Score Scripts/{Region}Datasets/{Region}_msoa_scores.csv",
    header=0,
    names=cycle_metrics
)

df = (df_y.merge(df_x, on="msoa", how="inner").dropna())

scaler = StandardScaler()


def regression_model(df):
    X_in  = scaler.fit_transform(df[features[x_label_features]])
    X_in  = sm.add_constant(X_in)                                  
    y      = df[y_label]
    #Ordinary least squares
    model  = sm.OLS(y, X_in).fit()
    print(model.summary())


regression_model(df)

